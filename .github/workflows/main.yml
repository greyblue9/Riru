name: Core
 

on:
  status:
  pull_request:
    paths-ignore:
      - '**/README.md'
  push:
    paths-ignore:
      - '**/README.md'

jobs:
  build:
    runs-on: ubuntu-20.04
    if: ${{ !startsWith(github.event.head_commit.message, '[skip ci]') }}

    steps:

      - name: Checkout Sources
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Setup Java v2
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'gradle'

#      - run: ./gradlew build
#      - name: set up JDK 11
#        uses: actions/setup-java@v1
#        with:
#          java-version: 11

      - name: Build with Gradle
        run: |
          mkdir -p ~/.gradle/wrapper
          mkdir -p ~/.gradle/caches
          echo 'org.gradle.caching=true' >> gradle.properties
          echo 'org.gradle.parallel=true' >> gradle.properties
          echo 'org.gradle.vfs.watch=true' >> gradle.properties
          echo 'org.gradle.jvmargs=-Xmx2048m' >> gradle.properties
          ./gradlew zipDebug zipRelease

      - name: Prepare artifact
        if: success()
        id: prepareArtifact
        run: |
          releaseName=`ls out/riru-*-release.zip | awk -F '(/|.zip)' '{print $2}'` && echo "::set-output name=releaseName::$releaseName"
          debugName=`ls out/riru-*-debug.zip | awk -F '(/|.zip)' '{print $2}'` && echo "::set-output name=debugName::$debugName"
          unzip "out/riru-*-release.zip" -d riru-release
          unzip "out/riru-*-debug.zip" -d riru-debug

      - name: Upload release
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.prepareArtifact.outputs.releaseName }}
          path: './riru-release/*'

      - name: Upload debug
        #      if: ${{ github.event_name == 'pull_request' && success() }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.prepareArtifact.outputs.debugName }}
          path: './riru-debug/*'

      - name: Upload mappings
        uses: actions/upload-artifact@v2
        with:
          name: mappings
          path: "riru/build/outputs/mapping/release"
