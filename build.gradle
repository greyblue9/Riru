import org.apache.tools.ant.filters.FixCrLfFilter
import org.eclipse.jgit.api.Git
import org.eclipse.jgit.internal.storage.file.FileRepository

import java.util.stream.StreamSupport

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.eclipse.jgit:org.eclipse.jgit:5.10.0.202012080955-r'
    }
}

plugins {
    id 'idea'
}

idea.module {
    excludeDirs += file('out')
    resourceDirs += file('template')
    excludeDirs += file('template/aar')
    resourceDirs += file('scripts')
    resourceDirs += file('docs')
}

ext {
    minSdkVersion = 23
    targetSdkVersion = 33
    buildToolsVersion = "33.0.0"

    riruApiVersion = 26
    riruMinApiVersion = 24

    repo = new FileRepository(rootProject.file(".git"))
    gitObjectId = repo.refDatabase.exactRef("refs/remotes/origin/master").objectId
    gitCommitId = gitObjectId.abbreviate(10).name()
    gitCommitCount = StreamSupport.stream(new Git(repo).log().add(gitObjectId).call().spliterator(), false).count()

    versionNameMinor = 1
    versionNamePatch = 7

    outDir = file("$rootDir/out")
}

task clean(type: Delete) {
    delete rootProject.buildDir, outDir
}

def aarVersion = "${riruApiVersion}.0.0"
def aarDir = "out/aar/dev/rikka/ndk/riru/${aarVersion}"

task generateLibraryAar(type: Zip) {
    copy {
        from 'riru/src/main/cpp/include_riru/riru.h'
        into 'template/aar/riru.aar/prefab/modules/riru/include'
    }

    from 'template/aar/riru.aar'
    archiveName "riru-${aarVersion}.aar"
    destinationDir file(aarDir)
}

task signLibraryAar(type: Exec) {
    commandLine "gpg",
            "--armor",
            "--detach-sign",
            "--passphrase=${findProperty("signing.password")}",
            "--batch",
            "--yes",
            "riru-${aarVersion}.aar"
    workingDir aarDir
}

task generateLibraryPom(type: Copy) {
    from 'template/aar/riru.pom'
    into file(aarDir)
    filter { line -> line.replaceAll('%%%VERSION%%%', "$aarVersion") }
    filter(FixCrLfFilter.class,
            eol: FixCrLfFilter.CrLf.newInstance("lf"))
    rename { "riru-${aarVersion}.pom" }
}

task signLibraryPom(type: Exec) {
    commandLine "gpg",
            "--armor",
            "--detach-sign",
            "--passphrase=${findProperty("signing.password")}",
            "--batch",
            "--yes",
            "riru-${aarVersion}.pom"
    workingDir aarDir
}

task generateLibrarySourceJar(type: Zip) {
    from 'template/aar/riru-sources.jar'
    archiveName "riru-${aarVersion}-sources.jar"
    destinationDir file(aarDir)
}

task signLibrarySourceJar(type: Exec) {
    commandLine "gpg",
            "--armor",
            "--detach-sign",
            "--passphrase=${findProperty("signing.password")}",
            "--batch",
            "--yes",
            "riru-${aarVersion}-sources.jar"
    workingDir aarDir
}

task generateLibraryJavaDocJar(type: Zip) {
    from 'template/aar/riru-javadoc.jar'
    archiveName "riru-${aarVersion}-javadoc.jar"
    destinationDir file(aarDir)
}

task signLibraryJavaDocJar(type: Exec) {
    commandLine "gpg",
            "--armor",
            "--detach-sign",
            "--passphrase=${findProperty("signing.password")}",
            "--batch",
            "--yes",
            "riru-${aarVersion}-javadoc.jar"
    workingDir aarDir
}

task generateLibrary(type: GradleBuild) {
    tasks = [':generateLibraryAar', ':generateLibraryPom', ':generateLibrarySourceJar', ':generateLibraryJavaDocJar',
             ':signLibraryAar', ':signLibraryPom', ':signLibrarySourceJar', ':signLibraryJavaDocJar']
}
